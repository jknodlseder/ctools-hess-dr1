import gammalibimport ctoolsimport cscriptsimport pdb# before running this script you need to run# analyse_crab.py# and prepare_fermi_data.py# you need to define the FERMI_DIFFUSE_DIR env variable to point to the directory where the Fermi diffuse models aredebug = False# spatial and spectral models for the Crab# positionra = 83.633dec = 22.015# log parabola parsprefactor = 3.23e-17  # ph cm-2 s-1 MeV-1index = -2.47pivot_e = 1  # TeVcurvature = -0.25#systematic uncertainties on scales, 1-sigma valuessigma_LAT = 0.15 # from FSSC pages, correspond to max over energy range considered for P8v3sigma_HESS = 0.3 # from HGPS paper : A&A 612, A1 (2018), Section 4.12# HESS observationshess_observations = [    {'filename': 'obs_crab_selected_onoff-stacked40_wstat_ptsrc.xml',     'id': 'wstat',     'bkgmodel': None},    {'filename': 'obs_crab_selected.xml',     'id' : 'unbinned',     'bkgmodel': 'crab_results_ptsrc_eplaw_lookup_grad_hess_edisp.xml'}    ]# configuration for buttefly and SEDemin = 0.05  # TeVemax = 100nebins = 15srcname = 'Crab'def get_fermi_obs():    # retrieve Fermi observations    obs = gammalib.GLATObservation()    obs.load_binned("srcmaps.fits",                    "expmap.fits",                    "ltcube.fits")    obs.response("P8R3_SOURCE_V2")    return obsdef get_crab_model():    src_dir = gammalib.GSkyDir()    src_dir.radec_deg(ra, dec)    spatial = gammalib.GModelSpatialPointSource(src_dir)    pivot = gammalib.GEnergy(pivot_e, 'TeV')    spectral = gammalib.GModelSpectralLogParabola(prefactor, index, pivot, curvature)    model = gammalib.GModelSky(spatial, spectral)    model.name(srcname)    return modeldef get_joint_obs(hess_obs):    # observations    obs = gammalib.GObservations(hess_obs['filename'])    obs.append(get_fermi_obs())    # models    obs.models().append(get_crab_model())    # Fermi diffuse    diffmodels = gammalib.GModels("diffmodel.xml")    for model in diffmodels:        model.instruments('LAT')        obs.models().append(model)    if hess_obs['bkgmodel'] == None:        pass    else:        models = gammalib.GModels(hess_obs['bkgmodel'])        for model in models:            if model.type()=='CTABackground' and model.instruments()=='HESS':                obs.models().append(model)    return obsdef run_analysis(obs, id):    # dump initial observations and models    obs.save("joint_observations_{}.xml".format(id))    obs.models().save("joint_models_{}.xml".format(id))    like = ctools.ctlike(obs)    like['outmodel'] = "joint_fitmodels_{}.xml".format(id)    like['debug'] = debug    like.execute()    # butterfly    butterfly = ctools.ctbutterfly(like.obs())    butterfly['srcname'] = srcname    butterfly['emin'] = emin    butterfly['emax'] = emax    butterfly['outfile'] = 'butterfly_{}.txt'.format(id)    butterfly['debug'] = debug    butterfly.execute()    # SED    spectrum = cscripts.csspec(like.obs())    spectrum['srcname'] = srcname    spectrum['method'] = 'AUTO'    spectrum['ebinalg'] = 'LOG'    spectrum['emin'] = emin    spectrum['emax'] = emax    spectrum['enumbins'] = nebins    spectrum['outfile'] = 'spectrum_{}.fits'.format(id)    spectrum['debug'] = debug    spectrum.execute()    # fit with free HESS scale    print("xcal")    if id == 'unbinned':        hessname = 'HESS'    elif id == 'wstat':        hessname = 'HESSOnOff'    else:        print('analysis type not supported in xcal')    scale_hess = gammalib.GModelPar(hessname, 1.0)    scale_hess.free()    like.obs().models()[srcname].scale(scale_hess)    # fix to make it work with current interface    # new_models = like.obs().models().copy()    # like.obs().models(new_models)    # end fix, delete when gammalib is changed    like['outmodel'] = "joint_fitmodels_{}_xcal.xml".format(id)    like.execute()    return# ======================== ## Main routine entry point ## ======================== #if __name__ == '__main__':    for hess_obs in hess_observations:        print("analysis type: " + hess_obs['id'])        obs = get_joint_obs(hess_obs)        run_analysis(obs, hess_obs['id'])